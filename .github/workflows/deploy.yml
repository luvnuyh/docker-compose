name: docker, ci/cd, ec2, hub

on:
  push:
    branches:
      - dev

jobs:
  docker-cicd:
    runs-on: ubuntu-latest
    steps:

      # 소스 코드 체크아웃
      - name: 소스 코드 체크 아웃
        uses: actions/checkout@v4

      # jdk 17 설치
      - name: jdk 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 필요시 현재까지 환경 수시 확인 ㄱㄴ -> 리눅스 명령어 (로그 체크)
      - name: 현재 상황 체크
        run: |
          pwd
          ls

      # 환경 변수 동적 세팅 ㄴ (여기서는 제외)
      # 빌드, 단위 테스트 -> 편의상 개발자 pc에서(프론트, 백에서) 선행 수행(생략)
      # 도커 관련 액션 <-> 도커 작업을 위한 환경
      - name: 도커 작업 진행을 위한 액션 적용
        uses: docker/setup-buildx-action@v3

      # 도커 허브에 진입해서  -> 프로필 -> 액세스 토큰 발급 받기
      # 토큰 발급: 프로필 > account settings > security personal
      # generate token >
      # 도커 허브 로그인 -> 계정 정보 필요 -> 시크릿 변수로 세팅
      - name: 도커 허브 로그인
        run: echo "${{secrets.HUB_DOCKER_TOKEN}}" | docker login -u "${{secrets.HUB_DOCKER_NAME}}" --password-stdin

      # 백엔드 이미지 생성 -> 허브(레포지토리) 푸시
      - name: 백엔드 이미지 생성 -> 허브(레포지토리) 푸시
        run: |
          docker build -t sohyun5429/demo_backend ./backend 
          docker push sohyun5429/demo_backend

      # 프론트 이미지 생성 -> 허브(레포지토리) 푸시
      - name: 프론트엔드 이미지 생성 -> 허브(레포지토리) 푸시
        run: |
          docker build -t sohyun5429/demo_frontend ./frontend 
          docker push sohyun5429/demo_frontend

      # ec2 서버로 필요 파일 업로드(yml, nginx/*.conf)
      # docker-compose.yml, ./nginx/default.conf 업로드
      # 타겟: /home/ubuntu
      - name: ec2 서버로 필요 파일 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: |
            docker-compose.yml, 
            ./nginx/default.conf
          target: /home/ubuntu

      # ec2 생성 -> 탄력적 ip 연결 -> 활성화 이후
      # ec2 접속
      - name: ec2 접속
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          script: |
      


      # 도커 설치 과정
      # 시스템 패키지 업데이트
      # sudo apt-get update
      # 필요한 패키지 설치
      # sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
      # Docker의 공식 GPG키를 추가
      # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      # Docker의 공식 apt 저장소를 추가
      # sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      # 시스템 패키지 업데이트
      # sudo apt-get update
      # Docker 설치
      # sudo apt-get install docker-ce docker-ce-cli containerd.io -y
    
    deploy:
      runs-on: ubuntu-latest
      # 해당 잡이 진행되려면 사전에 반드시 다른 잡이 선행되어야 함.
      needs: docker-cicd
      steps:
        - name: ec2에 ssh 접속 -> 도커 컴포즈 가동 -> 서비스 세팅완료
          uses: appleboy/ssh-action@v1.1.0
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_KEY }}
            script_stop: true
            # 이미지 갱ㅇ신 ㄴㄴ -> 도커 컴포즈 파일에 기술하여 버전 관리 ㄱㄴ
            # 이미지에 tag를 기입하여 버전을 관리한다면 매번 ...
            script: |
              sudo docker compose down
              sudo docker compse up -d
